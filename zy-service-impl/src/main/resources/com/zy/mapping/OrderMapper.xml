<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zy.mapper.OrderMapper" >

	<resultMap id="baseResultMap" type="com.zy.entity.mal.Order">
		<id column="id" property="id" />
		<result column="sn" property="sn" />
		<result column="user_id" property="userId" />
		<result column="seller_id" property="sellerId" />
		<result column="is_pay_to_platform" property="isPayToPlatform" />
		<result column="title" property="title" />
		<result column="created_time" property="createdTime" />
		<result column="expired_time" property="expiredTime" />
		<result column="paid_time" property="paidTime" />
		<result column="refunded_time" property="refundedTime" />
		<result column="currency_type" property="currencyType" typeHandler="org.apache.ibatis.type.EnumOrdinalTypeHandler" />
		<result column="order_status" property="orderStatus" typeHandler="org.apache.ibatis.type.EnumOrdinalTypeHandler" />
		<result column="discount_fee" property="discountFee" />
		<result column="amount" property="amount" />
		<result column="refund" property="refund" />
		<result column="refund_remark" property="refundRemark" />
		<result column="buyer_memo" property="buyerMemo" />
		<result column="seller_memo" property="sellerMemo" />
		<result column="remark" property="remark" />
		<result column="is_settled_up" property="isSettledUp" />
		<result column="use_logistics" property="useLogistics" />
		<result column="logistics_fee_pay_type" property="logisticsFeePayType" typeHandler="org.apache.ibatis.type.EnumOrdinalTypeHandler" />
		<result column="is_platform_deliver" property="isPlatformDeliver" />
		<result column="delivered_time" property="deliveredTime" />
		<result column="logistics_name" property="logisticsName" />
		<result column="logistics_sn" property="logisticsSn" />
		<result column="logistics_fee" property="logisticsFee" />
		<result column="receiver_area_id" property="receiverAreaId" />
		<result column="receiver_realname" property="receiverRealname" />
		<result column="receiver_phone" property="receiverPhone" />
		<result column="receiver_province" property="receiverProvince" />
		<result column="receiver_city" property="receiverCity" />
		<result column="receiver_district" property="receiverDistrict" />
		<result column="receiver_address" property="receiverAddress" />
		<result column="offline_image" property="offlineImage" />
		<result column="offline_memo" property="offlineMemo" />
		<result column="version" property="version" />
	</resultMap>

	<insert id="insert" parameterType="com.zy.entity.mal.Order" useGeneratedKeys="true" keyProperty="id">
	  insert into `mal_order` (sn,user_id,seller_id,is_pay_to_platform,title,created_time,expired_time,paid_time,refunded_time,currency_type,order_status,discount_fee,amount,refund,refund_remark,buyer_memo,seller_memo,remark,is_settled_up,use_logistics,logistics_fee_pay_type,is_platform_deliver,delivered_time,logistics_name,logistics_sn,logistics_fee,receiver_area_id,receiver_realname,receiver_phone,receiver_province,receiver_city,receiver_district,receiver_address,offline_image,offline_memo,version)
	  values (#{sn},#{userId},#{sellerId},#{isPayToPlatform},#{title},#{createdTime},#{expiredTime},#{paidTime},#{refundedTime},#{currencyType,typeHandler=org.apache.ibatis.type.EnumOrdinalTypeHandler},#{orderStatus,typeHandler=org.apache.ibatis.type.EnumOrdinalTypeHandler},#{discountFee},#{amount},#{refund},#{refundRemark},#{buyerMemo},#{sellerMemo},#{remark},#{isSettledUp},#{useLogistics},#{logisticsFeePayType,typeHandler=org.apache.ibatis.type.EnumOrdinalTypeHandler},#{isPlatformDeliver},#{deliveredTime},#{logisticsName},#{logisticsSn},#{logisticsFee},#{receiverAreaId},#{receiverRealname},#{receiverPhone},#{receiverProvince},#{receiverCity},#{receiverDistrict},#{receiverAddress},#{offlineImage},#{offlineMemo},#{version})
	</insert>

	<delete id="delete">
		delete from `mal_order` where id = #{id}
	</delete>

	<update id="update" parameterType="com.zy.entity.mal.Order">
		update `mal_order`
		<set>
			sn = #{sn},
			user_id = #{userId},
			seller_id = #{sellerId},
			is_pay_to_platform = #{isPayToPlatform},
			title = #{title},
			created_time = #{createdTime},
			expired_time = #{expiredTime},
			paid_time = #{paidTime},
			refunded_time = #{refundedTime},
			currency_type = #{currencyType,typeHandler=org.apache.ibatis.type.EnumOrdinalTypeHandler},
			order_status = #{orderStatus,typeHandler=org.apache.ibatis.type.EnumOrdinalTypeHandler},
			discount_fee = #{discountFee},
			amount = #{amount},
			refund = #{refund},
			refund_remark = #{refundRemark},
			buyer_memo = #{buyerMemo},
			seller_memo = #{sellerMemo},
			remark = #{remark},
			is_settled_up = #{isSettledUp},
			use_logistics = #{useLogistics},
			logistics_fee_pay_type = #{logisticsFeePayType,typeHandler=org.apache.ibatis.type.EnumOrdinalTypeHandler},
			is_platform_deliver = #{isPlatformDeliver},
			delivered_time = #{deliveredTime},
			logistics_name = #{logisticsName},
			logistics_sn = #{logisticsSn},
			logistics_fee = #{logisticsFee},
			receiver_area_id = #{receiverAreaId},
			receiver_realname = #{receiverRealname},
			receiver_phone = #{receiverPhone},
			receiver_province = #{receiverProvince},
			receiver_city = #{receiverCity},
			receiver_district = #{receiverDistrict},
			receiver_address = #{receiverAddress},
			offline_image = #{offlineImage},
			offline_memo = #{offlineMemo},
			version = version + 1,
		</set>
		where id = #{id} and version=#{version}
	</update>

	<update id="merge">
		update `mal_order`
			<set>
				<foreach collection="fields" item="field">
				<choose>
					<when test="field == 'sn'">sn = #{order.sn},</when>
					<when test="field == 'userId'">user_id = #{order.userId},</when>
					<when test="field == 'sellerId'">seller_id = #{order.sellerId},</when>
					<when test="field == 'isPayToPlatform'">is_pay_to_platform = #{order.isPayToPlatform},</when>
					<when test="field == 'title'">title = #{order.title},</when>
					<when test="field == 'createdTime'">created_time = #{order.createdTime},</when>
					<when test="field == 'expiredTime'">expired_time = #{order.expiredTime},</when>
					<when test="field == 'paidTime'">paid_time = #{order.paidTime},</when>
					<when test="field == 'refundedTime'">refunded_time = #{order.refundedTime},</when>
					<when test="field == 'currencyType'">currency_type = #{order.currencyType,typeHandler=org.apache.ibatis.type.EnumOrdinalTypeHandler,javaType=com.zy.entity.fnc.CurrencyType},</when>
					<when test="field == 'orderStatus'">order_status = #{order.orderStatus,typeHandler=org.apache.ibatis.type.EnumOrdinalTypeHandler,javaType=com.zy.entity.mal.Order$OrderStatus},</when>
					<when test="field == 'discountFee'">discount_fee = #{order.discountFee},</when>
					<when test="field == 'amount'">amount = #{order.amount},</when>
					<when test="field == 'refund'">refund = #{order.refund},</when>
					<when test="field == 'refundRemark'">refund_remark = #{order.refundRemark},</when>
					<when test="field == 'buyerMemo'">buyer_memo = #{order.buyerMemo},</when>
					<when test="field == 'sellerMemo'">seller_memo = #{order.sellerMemo},</when>
					<when test="field == 'remark'">remark = #{order.remark},</when>
					<when test="field == 'isSettledUp'">is_settled_up = #{order.isSettledUp},</when>
					<when test="field == 'useLogistics'">use_logistics = #{order.useLogistics},</when>
					<when test="field == 'logisticsFeePayType'">logistics_fee_pay_type = #{order.logisticsFeePayType,typeHandler=org.apache.ibatis.type.EnumOrdinalTypeHandler,javaType=com.zy.entity.mal.Order$LogisticsFeePayType},</when>
					<when test="field == 'isPlatformDeliver'">is_platform_deliver = #{order.isPlatformDeliver},</when>
					<when test="field == 'deliveredTime'">delivered_time = #{order.deliveredTime},</when>
					<when test="field == 'logisticsName'">logistics_name = #{order.logisticsName},</when>
					<when test="field == 'logisticsSn'">logistics_sn = #{order.logisticsSn},</when>
					<when test="field == 'logisticsFee'">logistics_fee = #{order.logisticsFee},</when>
					<when test="field == 'receiverAreaId'">receiver_area_id = #{order.receiverAreaId},</when>
					<when test="field == 'receiverRealname'">receiver_realname = #{order.receiverRealname},</when>
					<when test="field == 'receiverPhone'">receiver_phone = #{order.receiverPhone},</when>
					<when test="field == 'receiverProvince'">receiver_province = #{order.receiverProvince},</when>
					<when test="field == 'receiverCity'">receiver_city = #{order.receiverCity},</when>
					<when test="field == 'receiverDistrict'">receiver_district = #{order.receiverDistrict},</when>
					<when test="field == 'receiverAddress'">receiver_address = #{order.receiverAddress},</when>
					<when test="field == 'offlineImage'">offline_image = #{order.offlineImage},</when>
					<when test="field == 'offlineMemo'">offline_memo = #{order.offlineMemo},</when>
				</choose>
				</foreach>
			</set>
		where id = #{order.id}
	</update>

	<select id="findOne" resultMap="baseResultMap" parameterType="long">
		select
		id,sn,user_id,seller_id,is_pay_to_platform,title,created_time,expired_time,paid_time,refunded_time,currency_type,order_status,discount_fee,amount,refund,refund_remark,buyer_memo,seller_memo,remark,is_settled_up,use_logistics,logistics_fee_pay_type,is_platform_deliver,delivered_time,logistics_name,logistics_sn,logistics_fee,receiver_area_id,receiver_realname,receiver_phone,receiver_province,receiver_city,receiver_district,receiver_address,offline_image,offline_memo,version
		from `mal_order`
		where id = #{id}
	</select>

	<select id="findAll" resultMap="baseResultMap" parameterType="com.zy.model.query.OrderQueryModel">
		select
		id,sn,user_id,seller_id,is_pay_to_platform,title,created_time,expired_time,paid_time,refunded_time,currency_type,order_status,discount_fee,amount,refund,refund_remark,buyer_memo,seller_memo,remark,is_settled_up,use_logistics,logistics_fee_pay_type,is_platform_deliver,delivered_time,logistics_name,logistics_sn,logistics_fee,receiver_area_id,receiver_realname,receiver_phone,receiver_province,receiver_city,receiver_district,receiver_address,offline_image,offline_memo,version
		from `mal_order`
		<where>
			<if test="orderStatusEQ != null">
				and order_status = #{orderStatusEQ,typeHandler=org.apache.ibatis.type.EnumOrdinalTypeHandler}
			</if>
			<if test="sellerIdEQ != null">
				and seller_id = #{sellerIdEQ}
			</if>
			<if test="userIdEQ != null">
				and user_id = #{userIdEQ}
			</if>
			<if test="paidTimeLT != null">
				and paid_time &lt; #{paidTimeLT}
			</if>
			<if test="snLK != null">
				<bind name="snLK" value="'%' + snLK + '%'"/> and sn like #{snLK}
			</if>
			<if test="paidTimeGTE != null">
				and paid_time &gt;= #{paidTimeGTE}
			</if>
			<if test="isSettledUpEQ != null">
				and is_settled_up = #{isSettledUpEQ}
			</if>
			<if test="isPlatformDeliverEQ != null">
				and is_platform_deliver = #{isPlatformDeliverEQ}
			</if>
			<if test="createdTimeLT != null">
				and created_time &lt; #{createdTimeLT}
			</if>
			<if test="userIdIN != null">
				<if test="userIdIN.length != 0">
				and user_id in
				<foreach collection="userIdIN" item="item" open="(" separator="," close=")">
				#{item}
				</foreach>
				</if>
				<if test="userIdIN.length == 0">
				1 = 2
				</if>
			</if>
			<if test="logisticsNameLK != null">
				<bind name="logisticsNameLK" value="'%' + logisticsNameLK + '%'"/> and logistics_name like #{logisticsNameLK}
			</if>
			<if test="createdTimeGTE != null">
				and created_time &gt;= #{createdTimeGTE}
			</if>
			<if test="logisticsSnLK != null">
				<bind name="logisticsSnLK" value="'%' + logisticsSnLK + '%'"/> and logistics_sn like #{logisticsSnLK}
			</if>
			<if test="isPayToPlatformEQ != null">
				and is_pay_to_platform = #{isPayToPlatformEQ}
			</if>
			<if test="sellerIdIN != null">
				<if test="sellerIdIN.length != 0">
				and seller_id in
				<foreach collection="sellerIdIN" item="item" open="(" separator="," close=")">
				#{item}
				</foreach>
				</if>
				<if test="sellerIdIN.length == 0">
				1 = 2
				</if>
			</if>
		</where>
		<choose>
			<when test="orderByAndDirection != null">
				order by ${orderByAndDirection}
			</when>
			<otherwise>
				order by id desc
			</otherwise>
		</choose>
		<if test="offset != null">
			limit #{offset}, #{pageSize}
		</if>
	</select>

	<select id="count" resultType="_long" parameterType="com.zy.model.query.OrderQueryModel">
		select count(*) from `mal_order`
		<where>
			<if test="orderStatusEQ != null">
				and order_status = #{orderStatusEQ,typeHandler=org.apache.ibatis.type.EnumOrdinalTypeHandler}
			</if>
			<if test="sellerIdEQ != null">
				and seller_id = #{sellerIdEQ}
			</if>
			<if test="userIdEQ != null">
				and user_id = #{userIdEQ}
			</if>
			<if test="paidTimeLT != null">
				and paid_time &lt; #{paidTimeLT}
			</if>
			<if test="snLK != null">
				<bind name="snLK" value="'%' + snLK + '%'"/> and sn like #{snLK}
			</if>
			<if test="paidTimeGTE != null">
				and paid_time &gt;= #{paidTimeGTE}
			</if>
			<if test="isSettledUpEQ != null">
				and is_settled_up = #{isSettledUpEQ}
			</if>
			<if test="isPlatformDeliverEQ != null">
				and is_platform_deliver = #{isPlatformDeliverEQ}
			</if>
			<if test="createdTimeLT != null">
				and created_time &lt; #{createdTimeLT}
			</if>
			<if test="userIdIN != null">
				<if test="userIdIN.length != 0">
				and user_id in
				<foreach collection="userIdIN" item="item" open="(" separator="," close=")">
				#{item}
				</foreach>
				</if>
				<if test="userIdIN.length == 0">
				1 = 2
				</if>
			</if>
			<if test="logisticsNameLK != null">
				<bind name="logisticsNameLK" value="'%' + logisticsNameLK + '%'"/> and logistics_name like #{logisticsNameLK}
			</if>
			<if test="createdTimeGTE != null">
				and created_time &gt;= #{createdTimeGTE}
			</if>
			<if test="logisticsSnLK != null">
				<bind name="logisticsSnLK" value="'%' + logisticsSnLK + '%'"/> and logistics_sn like #{logisticsSnLK}
			</if>
			<if test="isPayToPlatformEQ != null">
				and is_pay_to_platform = #{isPayToPlatformEQ}
			</if>
			<if test="sellerIdIN != null">
				<if test="sellerIdIN.length != 0">
				and seller_id in
				<foreach collection="sellerIdIN" item="item" open="(" separator="," close=")">
				#{item}
				</foreach>
				</if>
				<if test="sellerIdIN.length == 0">
				1 = 2
				</if>
			</if>
		</where>
	</select>

	<select id="findBySn" resultMap="baseResultMap">
		select
		*
		from `mal_order`
		where sn = #{sn}
	</select>

	<resultMap id="sumResultMap" type="com.zy.model.dto.OrderSumDto">
		<result column="count_number" property="countNumber"/>
		<result column="quantity" property="sumQuantity"/>
		<result column="amount" property="sumAmount"/>
	</resultMap>

	<select id="orderSum" resultMap="sumResultMap" parameterType="com.zy.model.query.OrderQueryModel">
		select count(id) countNumber, sum(quantity) quantity, sum(amount) amount 
		from mal_order_item where order_id in 
		(select id from mal_order 
		<where>
			<if test="orderStatusEQ != null">
				and order_status = #{orderStatusEQ,typeHandler=org.apache.ibatis.type.EnumOrdinalTypeHandler}
			</if>
			<if test="sellerIdEQ != null">
				and seller_id = #{sellerIdEQ}
			</if>
			<if test="userIdEQ != null">
				and user_id = #{userIdEQ}
			</if>
			<if test="paidTimeLT != null">
				and paid_time &lt; #{paidTimeLT}
			</if>
			<if test="snLK != null">
				<bind name="snLK" value="'%' + snLK + '%'"/> and sn like #{snLK}
			</if>
			<if test="paidTimeGTE != null">
				and paid_time &gt;= #{paidTimeGTE}
			</if>
			<if test="isSettledUpEQ != null">
				and is_settled_up = #{isSettledUpEQ}
			</if>
			<if test="isPlatformDeliverEQ != null">
				and is_platform_deliver = #{isPlatformDeliverEQ}
			</if>
			<if test="createdTimeLT != null">
				and created_time &lt; #{createdTimeLT}
			</if>
			<if test="userIdIN != null">
				<if test="userIdIN.length != 0">
				and user_id in
				<foreach collection="userIdIN" item="item" open="(" separator="," close=")">
				#{item}
				</foreach>
				</if>
				<if test="userIdIN.length == 0">
				1 = 2
				</if>
			</if>
			<if test="logisticsNameLK != null">
				<bind name="logisticsNameLK" value="'%' + logisticsNameLK + '%'"/> and logistics_name like #{logisticsNameLK}
			</if>
			<if test="createdTimeGTE != null">
				and created_time &gt;= #{createdTimeGTE}
			</if>
			<if test="logisticsSnLK != null">
				<bind name="logisticsSnLK" value="'%' + logisticsSnLK + '%'"/> and logistics_sn like #{logisticsSnLK}
			</if>
			<if test="sellerIdIN != null">
				<if test="sellerIdIN.length != 0">
				and seller_id in
				<foreach collection="sellerIdIN" item="item" open="(" separator="," close=")">
				#{item}
				</foreach>
				</if>
				<if test="sellerIdIN.length == 0">
				1 = 2
				</if>
			</if>
		</where>
		)
	</select>

</mapper>